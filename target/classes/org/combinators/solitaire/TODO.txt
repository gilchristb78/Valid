Tasks to complete

1. Synthesize the availableMoves method.

  This can be done by inspecting rules and generating code to try each
  of the possible cross-product of source and target

  Difficulty: Hard

2. Document the story of lifting common abstractions into combinators.

   How does code evolve. In PROGRAMMING-2018 the notion of code evolution should
   be present.

    CODE -> TEMPLATE + COMBINATOR

    COMBINATOR -> CLASS is the lifting of concepts
    CLASS + CLASS -> CLASS is identifying commonalities and merging as needed

    FUNCTION -> CLASS

    TEMPLATECODE -> COMBINATORS or DEF

    Often, I spend time writing new code in the synthesized area. Then I validate
    it works, and then copy it back into the combinators to be resynthesized. This
    is directly analagous to how many programmers do code development inside
    Eclipse while debugging methods because you can save and restart the method
    execution and it picks up right where it left off.

    MAKE A CHANGE TO SHARED COMBINATOR --> MUST REVIEW ALL EXISTING VARIATIONS ***
      -- done mostly to eliminate lots of now-unnecessary code


 ALSO:

  Add modeling capability to domain Model (i.e., solvable, automoves, etc...) and
  then go into existing programmatic combinators and take advantage of synthezing
  appropriate code based on the domain model variability.

  Replace function "case blocks" with code generators.  Now FIVE + instances of this.
  Extensibility assured through code. A bit of an expression problem solution that
  is viable for synthesis.

  Run stats on amount of code needed to write synthesis. Compare based on past
  git commits.

  Also look at shared combinators vs. unique and compare with notes from ICFP paper.

3. Add SBT file to allow SBT to generate/compile each of the synthesized versions

4. Have multiple people work on same stuff.

   How to plan combinators with a team. Take inspiration from @Annotations in Java

   define new semantic type (inter. type) then each team member is working on
   an instance of a combinator that produces that type. Parallelize the refactoring
   once the abstraction has been lifted.

   Continuous Synthesize - handled by the back end upon git checkin.

   When you 'compute' it will automatically run tests in the background for the
   variation. One can envision writing a different application domain model, this
   time represneting validboard states and the moves that should be allowed. Then
   validate it works.

   EXPECT x GIVEN y ON BOARD z

   Could use Cucumber/Gherkin for this purpose. which could be converted into back-end
   test case synthesis.

   Can envision any number of tests cases to run on the synthesized code.